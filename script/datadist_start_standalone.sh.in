#!/usr/bin/env bash

set -u

chainConfig="@CMAKE_INSTALL_PREFIX@/config/datadist_standalone_chain.json"
readoutConfig="@CMAKE_INSTALL_PREFIX@/config/readout_emu.cfg"

function parse_parameters() {
read -d '' PARSER <<"EOF"
import argparse

parser = argparse.ArgumentParser(description='Run FLP-EPN chain',
                                 formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=40, width=120))
parser.add_argument('--readout', dest='readout', required=False, action='store_true', help='Use o2-readout-exe data source in emulation mode')
parser.add_argument('--readout_cfg',required=False, default='', action='store', help='Optional configuration file for o2-readout-exe')

parser.add_argument('--tmux', required=False, action='store_true', help='Run in tmux CC mode')

parser.add_argument('-n', '--equip', required=False, default=2, action='store', type=int, help='Number data producer equipment per FLP chain')
parser.add_argument('-r', '--rate', required=False, default=2.0, action='store', type=float, help='Data rate of each equipment instance (in Gb/s)')
parser.add_argument('-s', '--rsize', required=False, default=4, action='store', type=int, help='Size of the readout memory segment (in GiB)')
parser.add_argument('-p', '--spsize', required=False, default=2, action='store', type=int, help='Size of the readout super-pages (in MiB)')

parser.add_argument('--dpl-passthrough', required=False, action='store_true', help='Send SubTimeFrames through DPL.')

parser.add_argument('--data-source-dir', required=False, default='', action='store', help='Directory where to find recorded STF data')

parser.add_argument('--data-sink-dir', required=False, default='', action='store', help='Directory where to store STFs from SubTimeFrameBuilder')

try:
  args = parser.parse_args()
except SystemExit:
  exit(1) # return error to stop the script if help is shown

print("EMU=%s" % ("readout" if args.readout else "emu"))
print("READOUT_CFG='%s'" % args.readout_cfg)
print("EQUIPMENT_CNT=%s" % args.equip)
print("EQUIPMENT_RATE=%s" % int(args.rate * 1e+9))
print("DATA_REGION_SIZE=%s" % int(args.rsize * (1<<30)))
print("SUPERPAGE_SIZE=%s" % int(args.spsize * (1<<20)))
print("STF_BUILDER_SOURCE_DIR='%s'" % args.data_source_dir)
print("STF_BUILDER_SINK_DIR='%s'" % args.data_sink_dir)

print("DPL_PASS=%s" % ("1" if args.dpl_passthrough else ""))

print("USE_TMUX=%s" % ("1" if args.tmux else ""))
EOF

python3 -c "$PARSER" "$@"
}

ARGS="$(parse_parameters "$@")"
if [ ! $? -eq 0 ]; then
  echo "$ARGS"
  exit 1
fi

echo "$ARGS"
eval "$ARGS"

IO_THREADS=8

PRESS="read -s -n1 -p 'Press any key...'"

if [[ "$EMU" == "emu" ]]; then
  READOUT="ReadoutEmulator"
  READOUT+=" --transport shmem"
  READOUT+=" --shm-monitor true"
  READOUT+=" --mq-config $chainConfig"
  READOUT+=" --data-shm-region-size $DATA_REGION_SIZE"
  READOUT+=" --cru-superpage-size $SUPERPAGE_SIZE"
  READOUT+=" --cru-link-count $EQUIPMENT_CNT"
  READOUT+=" --cru-link-bits-per-s $EQUIPMENT_RATE"
  READOUT+=" --gui"
  READOUT+=" --io-threads $IO_THREADS"

  READOUT_PARAM="--link-id-offset 0  --id readout-0 --session default"

else
  if ! [ -x "$(command -v o2-readout-exe)" ]; then
    echo "ERROR: Make sure o2-readout-exe is installed (and the Readout module is loaded)"
    exit -1
  fi

  echo "Using o2-readout-exe in emulation mode. Configuration is read from $readoutConfig"
  READOUT="o2-readout-exe"


  if [[ ! -z $READOUT_CFG ]]; then
    READOUT+=" file://$READOUT_CFG"
  else
    READOUT+=" file://$readoutConfig"
  fi

  READOUT_PARAM=""
fi

STF_BUILDER="StfBuilder"
STF_BUILDER+=" --transport shmem"
STF_BUILDER+=" --mq-config $chainConfig"
STF_BUILDER+=" --detector TPC"
STF_BUILDER+=" --detector-rdh 6"
STF_BUILDER+=" --io-threads $IO_THREADS"
STF_BUILDER+=" --max-buffered-stfs 2"

if [[ ! -z $DPL_PASS ]]; then
  STF_BUILDER+=" --dpl-channel-name=dpl-channel"
fi

if [[ ! -z $STF_BUILDER_SINK_DIR ]]; then
  if [[ ! -d $STF_BUILDER_SINK_DIR ]]; then
    echo "STF Builder file sink directory does not exist!"
    exit 1
  fi

  STF_BUILDER+=" --data-sink-enable"
  STF_BUILDER+=" --data-sink-dir $STF_BUILDER_SINK_DIR"
  STF_BUILDER+=" --data-sink-max-stfs-per-file 44"
  STF_BUILDER+=" --data-sink-sidecar"
fi

if [[ ! -z $STF_BUILDER_SOURCE_DIR ]]; then
  if [[ ! -d $STF_BUILDER_SOURCE_DIR ]]; then
    echo "STF Builder file source directory does not exist!"
    exit 1
  fi

  STF_BUILDER+=" --data-source-enable"
  STF_BUILDER+=" --data-source-dir $STF_BUILDER_SOURCE_DIR"
  STF_BUILDER+=" --data-source-rate 44"
  STF_BUILDER+=" --data-source-repeat"

  # disable readout process
  READOUT=${PRESS}
  READOUT_PARAM=""
fi


STF_SENDER="StfSender"
STF_SENDER+=" --transport shmem"
STF_SENDER+=" --mq-config $chainConfig"
STF_SENDER+=" --io-threads $IO_THREADS"
STF_SENDER+=" --input-channel-name=input-stf-channel" ## same for DPL and StfBuilder (see the json file)
STF_SENDER+=" --stand-alone"
STF_SENDER+=" --id stf_sender-0 --session default"


if [[ -z $DPL_PASS ]]; then
  STF_SENDER="" # disable sender
  STF_BUILDER+=" --stand-alone"
fi



if [[ -z $USE_TMUX ]]; then
  # (FLP) Start FLP processes
  xterm -geometry 90x57+1120+0 -hold -e "$STF_SENDER" --id stf_sender-0 --session default &
  xterm -geometry 90x57+560+0 -hold -e "$STF_BUILDER" --id stf_builder-0 --session default &
  xterm -geometry 90x57+0+0 -hold -e "$READOUT $READOUT_PARAM" &
else
  # poor man's tmux environment cloning; make sure you're running tmux in control center (-CC) mode
  ENV_VAR_FILE=$(mktemp)
  typeset -gx > $ENV_VAR_FILE

  # cat $ENV_VAR_FILE

  tmux -CC \
    new-window \
    "source $ENV_VAR_FILE; $READOUT $READOUT_PARAM; $PRESS" \; \
    split-window \
    "source $ENV_VAR_FILE; $STF_BUILDER --id stf_builder-0 --session default; $PRESS; rm $ENV_VAR_FILE" \; \
    split-window \
    "source $ENV_VAR_FILE; $STF_SENDER; $PRESS; rm $ENV_VAR_FILE" \; \
    select-layout even-horizontal
fi
